{"ast":null,"code":"import axios from 'axios';\nimport { GET_RANDOM, GET_NAME, GET_RANDOM_QUOTE, GET_QUOTE, GET_RANDOM_DEAD } from './constants';\nimport swal from 'sweetalert';\nexport function getRandom() {\n  return function (dispatch) {\n    axios.get(`http://localhost:3001/api/search/random`).then(res => res.data).then(data => {\n      dispatch({\n        type: GET_RANDOM,\n        payload: data\n      });\n    }).catch(() => swal(\"Oops\", \"Hubo un error, por favor intentelo mas tarde!\", \"error\"));\n  };\n}\nexport function getRandomDead() {\n  return function (dispatch) {\n    axios.get(`http://localhost:3001/api/search/random/dead`).then(res => res.data).then(data => {\n      dispatch({\n        type: GET_RANDOM_DEAD,\n        payload: data\n      });\n      console.log(data);\n    }).catch(err).catch(() => swal(\"Oops\", \"Hubo un error, por favor intentelo mas tarde!\", \"error\"));\n  };\n}\nexport function getRandomQuote() {\n  return function (dispatch) {\n    axios.get(`http://localhost:3001/api/search/random/quote`).then(res => res.data).then(data => {\n      dispatch({\n        type: GET_RANDOM_QUOTE,\n        payload: data\n      });\n    }).catch(() => swal(\"Oops\", \"Hubo un error, por favor intentelo mas tarde!\", \"error\"));\n  };\n}\nexport function getName(query) {\n  return function (dispatch) {\n    axios.get(`http://localhost:3001/api/search/characters?q=${query}`).then(res => res.data).then(data => {\n      dispatch({\n        type: GET_NAME,\n        payload: data\n      });\n    }).catch(() => swal(\"Oops\", \"No se encontr贸 el personaje, revisa si escribiste bien el nombre!\", \"error\"));\n  };\n}\nexport function getQuote(query) {\n  return function (dispatch) {\n    axios.get(`http://localhost:3001/api/search/quotes?q=${query}`).then(res => res.data).then(data => {\n      dispatch({\n        type: GET_QUOTE,\n        payload: data\n      });\n    }).catch(() => swal(\"Oops\", \"No se encontr贸 el personaje, recuerda escribir nombre y apellido, respetando las mayusculas.\", \"error\"));\n  };\n}","map":{"version":3,"sources":["C:/Users/Blas y Dora/Desktop/Programacion/bb/breakingbad/src/redux/actions.js"],"names":["axios","GET_RANDOM","GET_NAME","GET_RANDOM_QUOTE","GET_QUOTE","GET_RANDOM_DEAD","swal","getRandom","dispatch","get","then","res","data","type","payload","catch","getRandomDead","console","log","err","getRandomQuote","getName","query","getQuote"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SACIC,UADJ,EAEIC,QAFJ,EAGIC,gBAHJ,EAIIC,SAJJ,EAKIC,eALJ,QAMO,aANP;AAOA,OAAOC,IAAP,MAAiB,YAAjB;AAGA,OAAO,SAASC,SAAT,GAAqB;AACxB,SAAO,UAAUC,QAAV,EAAoB;AACvBR,IAAAA,KAAK,CAACS,GAAN,CAAW,yCAAX,EACKC,IADL,CACWC,GAAD,IAASA,GAAG,CAACC,IADvB,EAEKF,IAFL,CAEYE,IAAI,IAAI;AACZJ,MAAAA,QAAQ,CAAC;AAAEK,QAAAA,IAAI,EAAEZ,UAAR;AAAoBa,QAAAA,OAAO,EAACF;AAA5B,OAAD,CAAR;AACH,KAJL,EAKKG,KALL,CAKY,MAAMT,IAAI,CAAG,MAAH,EAAa,+CAAb,EAAgE,OAAhE,CALtB;AAMH,GAPD;AAQH;AAED,OAAO,SAASU,aAAT,GAAyB;AAC5B,SAAO,UAAUR,QAAV,EAAoB;AACvBR,IAAAA,KAAK,CAACS,GAAN,CAAW,8CAAX,EACKC,IADL,CACWC,GAAD,IAASA,GAAG,CAACC,IADvB,EAEKF,IAFL,CAEYE,IAAI,IAAI;AACZJ,MAAAA,QAAQ,CAAC;AAAEK,QAAAA,IAAI,EAAER,eAAR;AAAyBS,QAAAA,OAAO,EAACF;AAAjC,OAAD,CAAR;AACAK,MAAAA,OAAO,CAACC,GAAR,CAAYN,IAAZ;AACH,KALL,EAMKG,KANL,CAMWI,GANX,EAOKJ,KAPL,CAOY,MAAMT,IAAI,CAAG,MAAH,EAAa,+CAAb,EAAgE,OAAhE,CAPtB;AAQH,GATD;AAUH;AAGD,OAAO,SAASc,cAAT,GAA0B;AAC7B,SAAO,UAAUZ,QAAV,EAAoB;AACvBR,IAAAA,KAAK,CAACS,GAAN,CAAW,+CAAX,EACCC,IADD,CACOC,GAAD,IAASA,GAAG,CAACC,IADnB,EAECF,IAFD,CAEQE,IAAI,IAAI;AACZJ,MAAAA,QAAQ,CAAC;AAAEK,QAAAA,IAAI,EAAEV,gBAAR;AAA0BW,QAAAA,OAAO,EAACF;AAAlC,OAAD,CAAR;AACH,KAJD,EAKCG,KALD,CAKQ,MAAMT,IAAI,CAAG,MAAH,EAAa,+CAAb,EAAgE,OAAhE,CALlB;AAMH,GAPD;AAQH;AAGD,OAAO,SAASe,OAAT,CAAiBC,KAAjB,EAAwB;AAC3B,SAAO,UAAUd,QAAV,EAAoB;AACvBR,IAAAA,KAAK,CAACS,GAAN,CAAW,iDAAgDa,KAAM,EAAjE,EACKZ,IADL,CACWC,GAAD,IAASA,GAAG,CAACC,IADvB,EAEKF,IAFL,CAEYE,IAAI,IAAI;AACZJ,MAAAA,QAAQ,CAAC;AAAEK,QAAAA,IAAI,EAAEX,QAAR;AAAkBY,QAAAA,OAAO,EAACF;AAA1B,OAAD,CAAR;AACH,KAJL,EAKKG,KALL,CAKY,MAAMT,IAAI,CAAG,MAAH,EAAa,mEAAb,EAAoF,OAApF,CALtB;AAMH,GAPD;AAQH;AACD,OAAO,SAASiB,QAAT,CAAkBD,KAAlB,EAAyB;AAC5B,SAAO,UAAUd,QAAV,EAAoB;AACvBR,IAAAA,KAAK,CAACS,GAAN,CAAW,6CAA4Ca,KAAM,EAA7D,EACKZ,IADL,CACWC,GAAD,IAASA,GAAG,CAACC,IADvB,EAEKF,IAFL,CAEYE,IAAI,IAAI;AACZJ,MAAAA,QAAQ,CAAC;AAAEK,QAAAA,IAAI,EAAET,SAAR;AAAmBU,QAAAA,OAAO,EAACF;AAA3B,OAAD,CAAR;AACH,KAJL,EAKKG,KALL,CAKY,MAAMT,IAAI,CAChB,MADgB,EACN,8FADM,EAC4F,OAD5F,CALtB;AAOH,GARD;AASH","sourcesContent":["import axios from 'axios'\r\n\r\nimport {\r\n    GET_RANDOM,\r\n    GET_NAME,\r\n    GET_RANDOM_QUOTE,\r\n    GET_QUOTE,\r\n    GET_RANDOM_DEAD\r\n} from './constants'\r\nimport swal from 'sweetalert'\r\n\r\n\r\nexport function getRandom() {\r\n    return function (dispatch) {\r\n        axios.get(`http://localhost:3001/api/search/random`)\r\n            .then((res) => res.data )\r\n            .then ( data => {\r\n                dispatch({ type: GET_RANDOM, payload:data})\r\n            })\r\n            .catch( () => swal ( \"Oops\" ,  \"Hubo un error, por favor intentelo mas tarde!\" ,  \"error\" ) )\r\n    }\r\n}\r\n\r\nexport function getRandomDead() {\r\n    return function (dispatch) {\r\n        axios.get(`http://localhost:3001/api/search/random/dead`)\r\n            .then((res) => res.data )\r\n            .then ( data => {\r\n                dispatch({ type: GET_RANDOM_DEAD, payload:data})\r\n                console.log(data)\r\n            })\r\n            .catch(err )\r\n            .catch( () => swal ( \"Oops\" ,  \"Hubo un error, por favor intentelo mas tarde!\" ,  \"error\" ) )\r\n    }\r\n}\r\n\r\n\r\nexport function getRandomQuote() {\r\n    return function (dispatch) {\r\n        axios.get(`http://localhost:3001/api/search/random/quote`)\r\n        .then((res) => res.data )\r\n        .then ( data => {\r\n            dispatch({ type: GET_RANDOM_QUOTE, payload:data})\r\n        })\r\n        .catch( () => swal ( \"Oops\" ,  \"Hubo un error, por favor intentelo mas tarde!\" ,  \"error\" ) )\r\n    }\r\n}\r\n\r\n\r\nexport function getName(query) {\r\n    return function (dispatch) {\r\n        axios.get(`http://localhost:3001/api/search/characters?q=${query}`)\r\n            .then((res) => res.data )\r\n            .then ( data => {\r\n                dispatch({ type: GET_NAME, payload:data})\r\n            })\r\n            .catch( () => swal ( \"Oops\" ,  \"No se encontr贸 el personaje, revisa si escribiste bien el nombre!\" ,  \"error\" ) )\r\n    }\r\n}\r\nexport function getQuote(query) {\r\n    return function (dispatch) {\r\n        axios.get(`http://localhost:3001/api/search/quotes?q=${query}`)\r\n            .then((res) => res.data )\r\n            .then ( data => {\r\n                dispatch({ type: GET_QUOTE, payload:data})\r\n            })\r\n            .catch( () => swal \r\n            ( \"Oops\" ,  \"No se encontr贸 el personaje, recuerda escribir nombre y apellido, respetando las mayusculas.\" ,  \"error\" ) )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}